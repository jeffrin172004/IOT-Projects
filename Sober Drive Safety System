#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Pin definitions
const int motorPin1 = 6;
const int motorPin11 = 7;
const int motorPin2 = 8;
const int motorPin21 = 9;
const int alarmPin = 12;
const int mq3Pin = A0;
const int gpsRxPin = 4;   // GPS Module RX pin
const int gpsTxPin = 3;   // GPS Module TX pin
const int alcoholThreshold = 350;

// Variables for sensor readings and motor state
int mq3Reading = 0;
bool vehicleStopped = false;
int generatedOTP = 0;
bool otpSent = false;

// GSM communication via Serial (pins 0 and 1)
TinyGPSPlus gps;

// Create LCD object
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Initialize SoftwareSerial for GPS
SoftwareSerial gpsSerial(gpsRxPin, gpsTxPin);

void setup() {
  Serial.begin(9600);  // Initialize Serial for debugging and GSM communication
  gpsSerial.begin(9600);  // Initialize GPS communication

  lcd.begin(16, 2);
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("System Init...");

  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin11, OUTPUT);
  pinMode(motorPin21, OUTPUT);
  pinMode(alarmPin, OUTPUT);

  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin11, LOW);
  digitalWrite(motorPin2, HIGH);
  digitalWrite(motorPin21, LOW);
  digitalWrite(alarmPin, LOW);

  // GSM Module Setup Commands
  sendATCommand("AT", 1000);
  sendATCommand("AT+CPMS=\"SM\",\"SM\",\"SM\"", 1000);
  sendATCommand("AT+CNMI=1,2,0,0,0", 1000);
  sendATCommand("AT+CMGF=1", 1000);
  sendATCommand("AT+CREG?", 1000);
  sendATCommand("AT+CSQ", 1000);

  // Seed the random number generator
  randomSeed(millis());
}

void loop() {
  mq3Reading = analogRead(mq3Pin);

  // GPS Data Parsing
  if (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());
    delay(100);
  }

  if ((mq3Reading > alcoholThreshold) && (!vehicleStopped)) {
    stopVehicle();

    lcd.clear();
    lcd.print("Alcohol Detected!");
    delay(2000);
    lcd.setCursor(0, 1);
    lcd.print("Vehicle Stopped");
    delay(2000);

    // Generate and send OTP
    generatedOTP = random(1000, 10000); // Generate a 6-digit OTP
    String otpMessage = "DRUNK,OTP:" + String(generatedOTP);

    if (gps.location.isValid()) {
      String locationLink = "https://maps.google.com/?q=";
      locationLink += String(gps.location.lat(), 6);
      locationLink += ",";
      locationLink += String(gps.location.lng(), 6);
      otpMessage +=locationLink;
    } else {
      otpMessage += ",https://www.google.com/maps/search/vitap/@16.495269,80.4972426,795m/data=!3m2!1e3!4b1?entry=ttu&g_ep=EgoyMDI0MTAyOS4wIKXMDSoASAFQAw%3D%3D";
    }

    sendSMS("+916374967957", otpMessage);
    otpSent = true; // Mark that the OTP has been sent
  }

  if (Serial.available() > 0) {
    String incomingMessage = Serial.readStringUntil('\n');
    incomingMessage.trim();

    lcd.clear();
    lcd.print("Msg: ");
    lcd.setCursor(0, 1);
    lcd.print(incomingMessage);
    delay(2000);

    // Check if the received message matches the generated OTP
    if (otpSent && incomingMessage.toInt() == generatedOTP) {
      restartVehicle();
      otpSent = false; // Reset OTP sent status
    }
  } else {
    lcd.clear();
    lcd.print("No SMS Received");
    delay(2000);
  }
}

// Function to stop the vehicle
void stopVehicle() {
  vehicleStopped = true;
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(alarmPin, HIGH);

  lcd.clear();
  lcd.print("Vehicle Stopped");
  delay(2000);
}

// Function to restart the vehicle
void restartVehicle() {
  vehicleStopped = false;
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, HIGH);
  digitalWrite(alarmPin, LOW);

  lcd.clear();
  lcd.print("Vehicle Restarted");
  delay(2000);
}

// Function to send SMS
void sendSMS(String phoneNumber, String message) {
  delay(2000);

  Serial.println("AT+CMGS=\"" + phoneNumber + "\"");
  delay(1000);
  Serial.println(message);
  delay(1000);
  Serial.write(26);  // End of message command
  delay(3000);
}

// Function to send AT commands and print the response
void sendATCommand(String command, int delayTime) {
  delay(delayTime);
  while (Serial.available()) {
    Serial.write(Serial.read());
  }

  lcd.clear();
  lcd.print("Sending AT Cmd");
  delay(1000);
}
